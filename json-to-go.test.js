const jsonToGo = require("./json-to-go");

function quote(str) {
  return "'" + str
    .replace(/\t/g, "\\t")
    .replace(/\n/g, "\\n")
    .replace(/\r/g, "\\r")
    .replace(/'/g, "\\'") + "'"
}

function test(includeExampleData) {
  const testCases = [
    {
      input: '{"SourceCode": "exampleDataHere"}',
      expected:
        'type AutoGenerated struct {\n\tSourceCode string `json:"SourceCode"`\n}\n',
      expectedWithExample:
        'type AutoGenerated struct {\n\tSourceCode string `json:"SourceCode" example:"exampleDataHere"`\n}\n',
    },
    {
      input: '{"source_code": "exampleDataHere"}',
      expected:
        'type AutoGenerated struct {\n\tSourceCode string `json:"source_code"`\n}\n',
      expectedWithExample:
        'type AutoGenerated struct {\n\tSourceCode string `json:"source_code" example:"exampleDataHere"`\n}\n',
    },
    {
      input: '{"sourceCode": "exampleDataHere"}',
      expected:
        'type AutoGenerated struct {\n\tSourceCode string `json:"sourceCode"`\n}\n',
      expectedWithExample:
        'type AutoGenerated struct {\n\tSourceCode string `json:"sourceCode" example:"exampleDataHere"`\n}\n',
    },
    {
      input: '{"SOURCE_CODE": ""}',
      expected:
        'type AutoGenerated struct {\n\tSourceCode string `json:"SOURCE_CODE"`\n}\n',
      expectedWithExample:
        'type AutoGenerated struct {\n\tSourceCode string `json:"SOURCE_CODE"`\n}\n',
    },
    {
      input: '{"PublicIP": ""}',
      expected:
        'type AutoGenerated struct {\n\tPublicIP string `json:"PublicIP"`\n}\n',
      expectedWithExample:
        'type AutoGenerated struct {\n\tPublicIP string `json:"PublicIP"`\n}\n',
    },
    {
      input: '{"public_ip": ""}',
      expected:
        'type AutoGenerated struct {\n\tPublicIP string `json:"public_ip"`\n}\n',
      expectedWithExample:
        'type AutoGenerated struct {\n\tPublicIP string `json:"public_ip"`\n}\n',
    },
    {
      input: '{"publicIP": ""}',
      expected:
        'type AutoGenerated struct {\n\tPublicIP string `json:"publicIP"`\n}\n',
      expectedWithExample:
        'type AutoGenerated struct {\n\tPublicIP string `json:"publicIP"`\n}\n',
    },
    {
      input: '{"PUBLIC_IP": ""}',
      expected:
        'type AutoGenerated struct {\n\tPublicIP string `json:"PUBLIC_IP"`\n}\n',
      expectedWithExample:
        'type AutoGenerated struct {\n\tPublicIP string `json:"PUBLIC_IP"`\n}\n',
    },
    {
      input: '{"+1": "Fails", "-1": "This should not cause duplicate field name"}',
      expected:
        'type AutoGenerated struct {\n\tNum1 string `json:"+1"`\n\tNum10 string `json:"-1"`\n}\n',
      expectedWithExample:
        'type AutoGenerated struct {\n\tNum1 string `json:"+1" example:"Fails"`\n\tNum10 string `json:"-1" example:"This should not cause duplicate field name"`\n}\n',
    },
    {
      input: '{"age": 46}',
      expected:
        'type AutoGenerated struct {\n\tAge int8 `json:"age"`\n}\n',
      expectedWithExample:
        'type AutoGenerated struct {\n\tAge int8 `json:"age" example:"46"`\n}\n',
    },
    {
      input: '{"negativeFloat": -1.00}',
      expected:
        'type AutoGenerated struct {\n\tNegativeFloat float32 `json:"negativeFloat"`\n}\n',
      expectedWithExample:
        'type AutoGenerated struct {\n\tNegativeFloat float32 `json:"negativeFloat" example:"-1.1"`\n}\n',
    },
    {
      input: '{"zeroFloat": 0.00}',
      expected:
        'type AutoGenerated struct {\n\tZeroFloat float32 `json:"zeroFloat"`\n}\n',
      expectedWithExample:
        'type AutoGenerated struct {\n\tZeroFloat float32 `json:"zeroFloat" example:"0.1"`\n}\n',
    },
    {
      input: '{"positiveFloat": 1.00}',
      expected:
        'type AutoGenerated struct {\n\tPositiveFloat float32 `json:"positiveFloat"`\n}\n',
      expectedWithExample:
        'type AutoGenerated struct {\n\tPositiveFloat float32 `json:"positiveFloat" example:"1.1"`\n}\n',
    },
    {
      input: '{"negativeFloats": [-1.00, -2.00, -3.00]}',
      expected:
        'type AutoGenerated struct {\n\tNegativeFloats []float32 `json:"negativeFloats"`\n}\n',
      expectedWithExample:
        'type AutoGenerated struct {\n\tNegativeFloats []float32 `json:"negativeFloats"`\n}\n',
    },
    {
      input: '{"zeroFloats": [0.00, 0.00, 0.00]}',
      expected:
        'type AutoGenerated struct {\n\tZeroFloats []float32 `json:"zeroFloats"`\n}\n',
      expectedWithExample:
        'type AutoGenerated struct {\n\tZeroFloats []float32 `json:"zeroFloats"`\n}\n',
    },
    {
      input: '{"positiveFloats": [1.00, 2.00, 3.00]}',
      expected:
        'type AutoGenerated struct {\n\tPositiveFloats []float32 `json:"positiveFloats"`\n}\n',
      expectedWithExample:
        'type AutoGenerated struct {\n\tPositiveFloats []float32 `json:"positiveFloats"`\n}\n',
    },
    {
      input: '{"topLevel": { "secondLevel": "exampleDataHere"} }',
      expected:
        'type AutoGenerated struct {\n\tTopLevel struct {\n\t\tSecondLevel string `json:"secondLevel"`\n\t} `json:"topLevel"`\n}\n',
      expectedWithExample:
        'type AutoGenerated struct {\n\tTopLevel struct {\n\t\tSecondLevel string `json:"secondLevel" example:"exampleDataHere"`\n\t} `json:"topLevel"`\n}\n',
    },
    {
      input: '{"people": [{ "name": "Frank"}, {"name": "Dennis"}, {"name": "Dee"}, {"name": "Charley"}, {"name":"Mac"}] }',
      expected:
        'type AutoGenerated struct {\n\tPeople []struct {\n\t\tName string `json:"name"`\n\t} `json:"people"`\n}\n',
      expectedWithExample:
        'type AutoGenerated struct {\n\tPeople []struct {\n\t\tName string `json:"name" example:"Frank"`\n\t} `json:"people"`\n}\n',
    },
  ];

  for (const testCase of testCases) {
    const got = jsonToGo(testCase.input, null, null, includeExampleData);
    if (got.error) {
      console.assert(!got.error, `format('${testCase.input}'): ${got.error}`);
      process.exitCode = 16
    } else {
      const exp = includeExampleData ? testCase.expectedWithExample : testCase.expected
      const success = got.go === exp
      console.assert(success,
        `format('${testCase.input}'): \n\tgot:  ${quote(got.go)}\n\twant: ${quote(exp)}`
      );
      if(!success) process.exitCode = 17
    }
  }
  console.log(includeExampleData ? "done testing samples with data" : "done testing samples without data")
}

function testFiles() {
  const fs = require('fs');
  const path = require('path');

  const testCases = [
    "duplicate-top-level-structs",
    "double-nested-objects",
    "supported-number-types",
  ];

  for (const testCase of testCases) {

    try {
      const jsonData = fs.readFileSync(path.join('tests', testCase + '.json'), 'utf8');
      const expectedGoData = fs.readFileSync(path.join('tests', testCase + '.go'), 'utf8');
      const got = jsonToGo(jsonData);
      if (got.error) {
        console.assert(!got.error, `format('${jsonData}'): ${got.error}`);
        process.exitCode = 18
      } else {
        const success = got.go === expectedGoData
        console.assert(success,
          `format('${jsonData}'): \n\tgot:  ${quote(got.go)}\n\twant: ${quote(expectedGoData)}`
        );
        if(!success) process.exitCode = 19
      }
    } catch (err) {
      console.error(err);
      process.exitCode = 20
    }
  }
  console.log("done testing files")
}

test(false);
test(true)
testFiles()
